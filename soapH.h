/* soapH.h
   Generated by gSOAP 2.8.10 from XMLAMethods.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef SOAP_TYPE_xsd__bool
#define SOAP_TYPE_xsd__bool (9)
#endif

#define soap_default_xsd__bool(soap, a) soap_default_bool(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__bool(struct soap*, const char*, bool *);

#ifndef soap_write_xsd__bool
#define soap_write_xsd__bool(soap, data) ( soap_begin_send(soap) || soap_put_xsd__bool(soap, data, "xsd:bool", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_read_xsd__bool
#define soap_read_xsd__bool(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__bool(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__bool(struct soap*, bool *, const char*, const char*);

#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_begin_send(soap) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef SOAP_TYPE_cxmla__ExecuteResponse
#define SOAP_TYPE_cxmla__ExecuteResponse (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cxmla__ExecuteResponse(struct soap*, const char*, int, const cxmla__ExecuteResponse *, const char*);
SOAP_FMAC3 cxmla__ExecuteResponse * SOAP_FMAC4 soap_in_cxmla__ExecuteResponse(struct soap*, const char*, cxmla__ExecuteResponse *, const char*);

#ifndef soap_write_cxmla__ExecuteResponse
#define soap_write_cxmla__ExecuteResponse(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "cxmla:ExecuteResponse", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_cxmla__ExecuteResponse
#define soap_read_cxmla__ExecuteResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_cxmla__ExecuteResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 cxmla__ExecuteResponse * SOAP_FMAC4 soap_get_cxmla__ExecuteResponse(struct soap*, cxmla__ExecuteResponse *, const char*, const char*);

#define soap_new_cxmla__ExecuteResponse(soap, n) soap_instantiate_cxmla__ExecuteResponse(soap, n, NULL, NULL, NULL)


#define soap_delete_cxmla__ExecuteResponse(soap, p) soap_delete(soap, p)

SOAP_FMAC1 cxmla__ExecuteResponse * SOAP_FMAC2 soap_instantiate_cxmla__ExecuteResponse(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cxmla__ExecuteResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Command
#define SOAP_TYPE_xmlns__Command (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Command(struct soap*, const char*, int, const xmlns__Command *, const char*);
SOAP_FMAC3 xmlns__Command * SOAP_FMAC4 soap_in_xmlns__Command(struct soap*, const char*, xmlns__Command *, const char*);

#ifndef soap_write_xmlns__Command
#define soap_write_xmlns__Command(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:Command", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__Command
#define soap_read_xmlns__Command(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Command(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Command * SOAP_FMAC4 soap_get_xmlns__Command(struct soap*, xmlns__Command *, const char*, const char*);

#define soap_new_xmlns__Command(soap, n) soap_instantiate_xmlns__Command(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Command(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__Command * SOAP_FMAC2 soap_instantiate_xmlns__Command(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Command(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_cxmla__executeReturn
#define SOAP_TYPE_cxmla__executeReturn (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cxmla__executeReturn(struct soap*, const char*, int, const cxmla__executeReturn *, const char*);
SOAP_FMAC3 cxmla__executeReturn * SOAP_FMAC4 soap_in_cxmla__executeReturn(struct soap*, const char*, cxmla__executeReturn *, const char*);

#ifndef soap_write_cxmla__executeReturn
#define soap_write_cxmla__executeReturn(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "cxmla:executeReturn", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_cxmla__executeReturn
#define soap_read_cxmla__executeReturn(soap, data) ( soap_begin_recv(soap) || !soap_get_cxmla__executeReturn(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 cxmla__executeReturn * SOAP_FMAC4 soap_get_cxmla__executeReturn(struct soap*, cxmla__executeReturn *, const char*, const char*);

#define soap_new_cxmla__executeReturn(soap, n) soap_instantiate_cxmla__executeReturn(soap, n, NULL, NULL, NULL)


#define soap_delete_cxmla__executeReturn(soap, p) soap_delete(soap, p)

SOAP_FMAC1 cxmla__executeReturn * SOAP_FMAC2 soap_instantiate_cxmla__executeReturn(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cxmla__executeReturn(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__root
#define SOAP_TYPE_xmlns__root (82)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__root(struct soap*, const char*, int, const xmlns__root *, const char*);
SOAP_FMAC3 xmlns__root * SOAP_FMAC4 soap_in_xmlns__root(struct soap*, const char*, xmlns__root *, const char*);

#ifndef soap_write_xmlns__root
#define soap_write_xmlns__root(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:root", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__root
#define soap_read_xmlns__root(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__root(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__root * SOAP_FMAC4 soap_get_xmlns__root(struct soap*, xmlns__root *, const char*, const char*);

#define soap_new_xmlns__root(soap, n) soap_instantiate_xmlns__root(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__root(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__root * SOAP_FMAC2 soap_instantiate_xmlns__root(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__root(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__CellData
#define SOAP_TYPE_xmlns__CellData (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__CellData(struct soap*, const char*, int, const xmlns__CellData *, const char*);
SOAP_FMAC3 xmlns__CellData * SOAP_FMAC4 soap_in_xmlns__CellData(struct soap*, const char*, xmlns__CellData *, const char*);

#ifndef soap_write_xmlns__CellData
#define soap_write_xmlns__CellData(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:CellData", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__CellData
#define soap_read_xmlns__CellData(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__CellData(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__CellData * SOAP_FMAC4 soap_get_xmlns__CellData(struct soap*, xmlns__CellData *, const char*, const char*);

#define soap_new_xmlns__CellData(soap, n) soap_instantiate_xmlns__CellData(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__CellData(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__CellData * SOAP_FMAC2 soap_instantiate_xmlns__CellData(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__CellData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Cell
#define SOAP_TYPE_xmlns__Cell (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Cell(struct soap*, const char*, int, const xmlns__Cell *, const char*);
SOAP_FMAC3 xmlns__Cell * SOAP_FMAC4 soap_in_xmlns__Cell(struct soap*, const char*, xmlns__Cell *, const char*);

#ifndef soap_write_xmlns__Cell
#define soap_write_xmlns__Cell(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:Cell", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__Cell
#define soap_read_xmlns__Cell(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Cell(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Cell * SOAP_FMAC4 soap_get_xmlns__Cell(struct soap*, xmlns__Cell *, const char*, const char*);

#define soap_new_xmlns__Cell(soap, n) soap_instantiate_xmlns__Cell(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Cell(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__Cell * SOAP_FMAC2 soap_instantiate_xmlns__Cell(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Cell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Axes
#define SOAP_TYPE_xmlns__Axes (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Axes(struct soap*, const char*, int, const xmlns__Axes *, const char*);
SOAP_FMAC3 xmlns__Axes * SOAP_FMAC4 soap_in_xmlns__Axes(struct soap*, const char*, xmlns__Axes *, const char*);

#ifndef soap_write_xmlns__Axes
#define soap_write_xmlns__Axes(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:Axes", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__Axes
#define soap_read_xmlns__Axes(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Axes(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Axes * SOAP_FMAC4 soap_get_xmlns__Axes(struct soap*, xmlns__Axes *, const char*, const char*);

#define soap_new_xmlns__Axes(soap, n) soap_instantiate_xmlns__Axes(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Axes(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__Axes * SOAP_FMAC2 soap_instantiate_xmlns__Axes(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Axes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Tuples
#define SOAP_TYPE_xmlns__Tuples (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Tuples(struct soap*, const char*, int, const xmlns__Tuples *, const char*);
SOAP_FMAC3 xmlns__Tuples * SOAP_FMAC4 soap_in_xmlns__Tuples(struct soap*, const char*, xmlns__Tuples *, const char*);

#ifndef soap_write_xmlns__Tuples
#define soap_write_xmlns__Tuples(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:Tuples", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__Tuples
#define soap_read_xmlns__Tuples(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Tuples(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Tuples * SOAP_FMAC4 soap_get_xmlns__Tuples(struct soap*, xmlns__Tuples *, const char*, const char*);

#define soap_new_xmlns__Tuples(soap, n) soap_instantiate_xmlns__Tuples(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Tuples(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__Tuples * SOAP_FMAC2 soap_instantiate_xmlns__Tuples(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Tuples(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Member
#define SOAP_TYPE_xmlns__Member (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Member(struct soap*, const char*, int, const xmlns__Member *, const char*);
SOAP_FMAC3 xmlns__Member * SOAP_FMAC4 soap_in_xmlns__Member(struct soap*, const char*, xmlns__Member *, const char*);

#ifndef soap_write_xmlns__Member
#define soap_write_xmlns__Member(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:Member", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__Member
#define soap_read_xmlns__Member(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Member(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Member * SOAP_FMAC4 soap_get_xmlns__Member(struct soap*, xmlns__Member *, const char*, const char*);

#define soap_new_xmlns__Member(soap, n) soap_instantiate_xmlns__Member(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Member(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__Member * SOAP_FMAC2 soap_instantiate_xmlns__Member(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Member(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__OlapInfo
#define SOAP_TYPE_xmlns__OlapInfo (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__OlapInfo(struct soap*, const char*, int, const xmlns__OlapInfo *, const char*);
SOAP_FMAC3 xmlns__OlapInfo * SOAP_FMAC4 soap_in_xmlns__OlapInfo(struct soap*, const char*, xmlns__OlapInfo *, const char*);

#ifndef soap_write_xmlns__OlapInfo
#define soap_write_xmlns__OlapInfo(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:OlapInfo", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__OlapInfo
#define soap_read_xmlns__OlapInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__OlapInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__OlapInfo * SOAP_FMAC4 soap_get_xmlns__OlapInfo(struct soap*, xmlns__OlapInfo *, const char*, const char*);

#define soap_new_xmlns__OlapInfo(soap, n) soap_instantiate_xmlns__OlapInfo(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__OlapInfo(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__OlapInfo * SOAP_FMAC2 soap_instantiate_xmlns__OlapInfo(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__OlapInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__CellInfo
#define SOAP_TYPE_xmlns__CellInfo (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__CellInfo(struct soap*, const char*, int, const xmlns__CellInfo *, const char*);
SOAP_FMAC3 xmlns__CellInfo * SOAP_FMAC4 soap_in_xmlns__CellInfo(struct soap*, const char*, xmlns__CellInfo *, const char*);

#ifndef soap_write_xmlns__CellInfo
#define soap_write_xmlns__CellInfo(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:CellInfo", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__CellInfo
#define soap_read_xmlns__CellInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__CellInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__CellInfo * SOAP_FMAC4 soap_get_xmlns__CellInfo(struct soap*, xmlns__CellInfo *, const char*, const char*);

#define soap_new_xmlns__CellInfo(soap, n) soap_instantiate_xmlns__CellInfo(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__CellInfo(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__CellInfo * SOAP_FMAC2 soap_instantiate_xmlns__CellInfo(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__CellInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__AxesInfo
#define SOAP_TYPE_xmlns__AxesInfo (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__AxesInfo(struct soap*, const char*, int, const xmlns__AxesInfo *, const char*);
SOAP_FMAC3 xmlns__AxesInfo * SOAP_FMAC4 soap_in_xmlns__AxesInfo(struct soap*, const char*, xmlns__AxesInfo *, const char*);

#ifndef soap_write_xmlns__AxesInfo
#define soap_write_xmlns__AxesInfo(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:AxesInfo", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__AxesInfo
#define soap_read_xmlns__AxesInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__AxesInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__AxesInfo * SOAP_FMAC4 soap_get_xmlns__AxesInfo(struct soap*, xmlns__AxesInfo *, const char*, const char*);

#define soap_new_xmlns__AxesInfo(soap, n) soap_instantiate_xmlns__AxesInfo(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__AxesInfo(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__AxesInfo * SOAP_FMAC2 soap_instantiate_xmlns__AxesInfo(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__AxesInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__AxisInfo
#define SOAP_TYPE_xmlns__AxisInfo (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__AxisInfo(struct soap*, const char*, int, const xmlns__AxisInfo *, const char*);
SOAP_FMAC3 xmlns__AxisInfo * SOAP_FMAC4 soap_in_xmlns__AxisInfo(struct soap*, const char*, xmlns__AxisInfo *, const char*);

#ifndef soap_write_xmlns__AxisInfo
#define soap_write_xmlns__AxisInfo(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:AxisInfo", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__AxisInfo
#define soap_read_xmlns__AxisInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__AxisInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__AxisInfo * SOAP_FMAC4 soap_get_xmlns__AxisInfo(struct soap*, xmlns__AxisInfo *, const char*, const char*);

#define soap_new_xmlns__AxisInfo(soap, n) soap_instantiate_xmlns__AxisInfo(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__AxisInfo(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__AxisInfo * SOAP_FMAC2 soap_instantiate_xmlns__AxisInfo(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__AxisInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__HierarchyInfo
#define SOAP_TYPE_xmlns__HierarchyInfo (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__HierarchyInfo(struct soap*, const char*, int, const xmlns__HierarchyInfo *, const char*);
SOAP_FMAC3 xmlns__HierarchyInfo * SOAP_FMAC4 soap_in_xmlns__HierarchyInfo(struct soap*, const char*, xmlns__HierarchyInfo *, const char*);

#ifndef soap_write_xmlns__HierarchyInfo
#define soap_write_xmlns__HierarchyInfo(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:HierarchyInfo", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__HierarchyInfo
#define soap_read_xmlns__HierarchyInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__HierarchyInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__HierarchyInfo * SOAP_FMAC4 soap_get_xmlns__HierarchyInfo(struct soap*, xmlns__HierarchyInfo *, const char*, const char*);

#define soap_new_xmlns__HierarchyInfo(soap, n) soap_instantiate_xmlns__HierarchyInfo(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__HierarchyInfo(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__HierarchyInfo * SOAP_FMAC2 soap_instantiate_xmlns__HierarchyInfo(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__HierarchyInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__MemberType
#define SOAP_TYPE_xmlns__MemberType (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__MemberType(struct soap*, const char*, int, const xmlns__MemberType *, const char*);
SOAP_FMAC3 xmlns__MemberType * SOAP_FMAC4 soap_in_xmlns__MemberType(struct soap*, const char*, xmlns__MemberType *, const char*);

#ifndef soap_write_xmlns__MemberType
#define soap_write_xmlns__MemberType(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:MemberType", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__MemberType
#define soap_read_xmlns__MemberType(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__MemberType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__MemberType * SOAP_FMAC4 soap_get_xmlns__MemberType(struct soap*, xmlns__MemberType *, const char*, const char*);

#define soap_new_xmlns__MemberType(soap, n) soap_instantiate_xmlns__MemberType(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__MemberType(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__MemberType * SOAP_FMAC2 soap_instantiate_xmlns__MemberType(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__MemberType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__MemberName
#define SOAP_TYPE_xmlns__MemberName (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__MemberName(struct soap*, const char*, int, const xmlns__MemberName *, const char*);
SOAP_FMAC3 xmlns__MemberName * SOAP_FMAC4 soap_in_xmlns__MemberName(struct soap*, const char*, xmlns__MemberName *, const char*);

#ifndef soap_write_xmlns__MemberName
#define soap_write_xmlns__MemberName(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:MemberName", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__MemberName
#define soap_read_xmlns__MemberName(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__MemberName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__MemberName * SOAP_FMAC4 soap_get_xmlns__MemberName(struct soap*, xmlns__MemberName *, const char*, const char*);

#define soap_new_xmlns__MemberName(soap, n) soap_instantiate_xmlns__MemberName(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__MemberName(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__MemberName * SOAP_FMAC2 soap_instantiate_xmlns__MemberName(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__MemberName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__ParentUniqueName
#define SOAP_TYPE_xmlns__ParentUniqueName (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__ParentUniqueName(struct soap*, const char*, int, const xmlns__ParentUniqueName *, const char*);
SOAP_FMAC3 xmlns__ParentUniqueName * SOAP_FMAC4 soap_in_xmlns__ParentUniqueName(struct soap*, const char*, xmlns__ParentUniqueName *, const char*);

#ifndef soap_write_xmlns__ParentUniqueName
#define soap_write_xmlns__ParentUniqueName(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:ParentUniqueName", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__ParentUniqueName
#define soap_read_xmlns__ParentUniqueName(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__ParentUniqueName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__ParentUniqueName * SOAP_FMAC4 soap_get_xmlns__ParentUniqueName(struct soap*, xmlns__ParentUniqueName *, const char*, const char*);

#define soap_new_xmlns__ParentUniqueName(soap, n) soap_instantiate_xmlns__ParentUniqueName(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__ParentUniqueName(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__ParentUniqueName * SOAP_FMAC2 soap_instantiate_xmlns__ParentUniqueName(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__ParentUniqueName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__DisplayInfo
#define SOAP_TYPE_xmlns__DisplayInfo (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__DisplayInfo(struct soap*, const char*, int, const xmlns__DisplayInfo *, const char*);
SOAP_FMAC3 xmlns__DisplayInfo * SOAP_FMAC4 soap_in_xmlns__DisplayInfo(struct soap*, const char*, xmlns__DisplayInfo *, const char*);

#ifndef soap_write_xmlns__DisplayInfo
#define soap_write_xmlns__DisplayInfo(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:DisplayInfo", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__DisplayInfo
#define soap_read_xmlns__DisplayInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__DisplayInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__DisplayInfo * SOAP_FMAC4 soap_get_xmlns__DisplayInfo(struct soap*, xmlns__DisplayInfo *, const char*, const char*);

#define soap_new_xmlns__DisplayInfo(soap, n) soap_instantiate_xmlns__DisplayInfo(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__DisplayInfo(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__DisplayInfo * SOAP_FMAC2 soap_instantiate_xmlns__DisplayInfo(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__DisplayInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__LNum
#define SOAP_TYPE_xmlns__LNum (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__LNum(struct soap*, const char*, int, const xmlns__LNum *, const char*);
SOAP_FMAC3 xmlns__LNum * SOAP_FMAC4 soap_in_xmlns__LNum(struct soap*, const char*, xmlns__LNum *, const char*);

#ifndef soap_write_xmlns__LNum
#define soap_write_xmlns__LNum(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:LNum", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__LNum
#define soap_read_xmlns__LNum(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__LNum(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__LNum * SOAP_FMAC4 soap_get_xmlns__LNum(struct soap*, xmlns__LNum *, const char*, const char*);

#define soap_new_xmlns__LNum(soap, n) soap_instantiate_xmlns__LNum(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__LNum(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__LNum * SOAP_FMAC2 soap_instantiate_xmlns__LNum(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__LNum(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__LName
#define SOAP_TYPE_xmlns__LName (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__LName(struct soap*, const char*, int, const xmlns__LName *, const char*);
SOAP_FMAC3 xmlns__LName * SOAP_FMAC4 soap_in_xmlns__LName(struct soap*, const char*, xmlns__LName *, const char*);

#ifndef soap_write_xmlns__LName
#define soap_write_xmlns__LName(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:LName", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__LName
#define soap_read_xmlns__LName(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__LName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__LName * SOAP_FMAC4 soap_get_xmlns__LName(struct soap*, xmlns__LName *, const char*, const char*);

#define soap_new_xmlns__LName(soap, n) soap_instantiate_xmlns__LName(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__LName(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__LName * SOAP_FMAC2 soap_instantiate_xmlns__LName(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__LName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Caption
#define SOAP_TYPE_xmlns__Caption (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Caption(struct soap*, const char*, int, const xmlns__Caption *, const char*);
SOAP_FMAC3 xmlns__Caption * SOAP_FMAC4 soap_in_xmlns__Caption(struct soap*, const char*, xmlns__Caption *, const char*);

#ifndef soap_write_xmlns__Caption
#define soap_write_xmlns__Caption(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:Caption", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__Caption
#define soap_read_xmlns__Caption(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Caption(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Caption * SOAP_FMAC4 soap_get_xmlns__Caption(struct soap*, xmlns__Caption *, const char*, const char*);

#define soap_new_xmlns__Caption(soap, n) soap_instantiate_xmlns__Caption(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Caption(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__Caption * SOAP_FMAC2 soap_instantiate_xmlns__Caption(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Caption(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__UName
#define SOAP_TYPE_xmlns__UName (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__UName(struct soap*, const char*, int, const xmlns__UName *, const char*);
SOAP_FMAC3 xmlns__UName * SOAP_FMAC4 soap_in_xmlns__UName(struct soap*, const char*, xmlns__UName *, const char*);

#ifndef soap_write_xmlns__UName
#define soap_write_xmlns__UName(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:UName", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__UName
#define soap_read_xmlns__UName(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__UName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__UName * SOAP_FMAC4 soap_get_xmlns__UName(struct soap*, xmlns__UName *, const char*, const char*);

#define soap_new_xmlns__UName(soap, n) soap_instantiate_xmlns__UName(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__UName(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__UName * SOAP_FMAC2 soap_instantiate_xmlns__UName(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__UName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__CubeInfo
#define SOAP_TYPE_xmlns__CubeInfo (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__CubeInfo(struct soap*, const char*, int, const xmlns__CubeInfo *, const char*);
SOAP_FMAC3 xmlns__CubeInfo * SOAP_FMAC4 soap_in_xmlns__CubeInfo(struct soap*, const char*, xmlns__CubeInfo *, const char*);

#ifndef soap_write_xmlns__CubeInfo
#define soap_write_xmlns__CubeInfo(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:CubeInfo", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__CubeInfo
#define soap_read_xmlns__CubeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__CubeInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__CubeInfo * SOAP_FMAC4 soap_get_xmlns__CubeInfo(struct soap*, xmlns__CubeInfo *, const char*, const char*);

#define soap_new_xmlns__CubeInfo(soap, n) soap_instantiate_xmlns__CubeInfo(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__CubeInfo(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__CubeInfo * SOAP_FMAC2 soap_instantiate_xmlns__CubeInfo(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__CubeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Cube
#define SOAP_TYPE_xmlns__Cube (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Cube(struct soap*, const char*, int, const xmlns__Cube *, const char*);
SOAP_FMAC3 xmlns__Cube * SOAP_FMAC4 soap_in_xmlns__Cube(struct soap*, const char*, xmlns__Cube *, const char*);

#ifndef soap_write_xmlns__Cube
#define soap_write_xmlns__Cube(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:Cube", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__Cube
#define soap_read_xmlns__Cube(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Cube(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Cube * SOAP_FMAC4 soap_get_xmlns__Cube(struct soap*, xmlns__Cube *, const char*, const char*);

#define soap_new_xmlns__Cube(soap, n) soap_instantiate_xmlns__Cube(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Cube(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__Cube * SOAP_FMAC2 soap_instantiate_xmlns__Cube(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Cube(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_arrayUserProp
#define SOAP_TYPE_arrayUserProp (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_arrayUserProp(struct soap*, const char*, int, const arrayUserProp *, const char*);
SOAP_FMAC3 arrayUserProp * SOAP_FMAC4 soap_in_arrayUserProp(struct soap*, const char*, arrayUserProp *, const char*);

#ifndef soap_write_arrayUserProp
#define soap_write_arrayUserProp(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "arrayUserProp", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_arrayUserProp
#define soap_read_arrayUserProp(soap, data) ( soap_begin_recv(soap) || !soap_get_arrayUserProp(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 arrayUserProp * SOAP_FMAC4 soap_get_arrayUserProp(struct soap*, arrayUserProp *, const char*, const char*);

#define soap_new_arrayUserProp(soap, n) soap_instantiate_arrayUserProp(soap, n, NULL, NULL, NULL)


#define soap_delete_arrayUserProp(soap, p) soap_delete(soap, p)

SOAP_FMAC1 arrayUserProp * SOAP_FMAC2 soap_instantiate_arrayUserProp(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_arrayUserProp(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_cxmla__DiscoverResponse
#define SOAP_TYPE_cxmla__DiscoverResponse (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cxmla__DiscoverResponse(struct soap*, const char*, int, const cxmla__DiscoverResponse *, const char*);
SOAP_FMAC3 cxmla__DiscoverResponse * SOAP_FMAC4 soap_in_cxmla__DiscoverResponse(struct soap*, const char*, cxmla__DiscoverResponse *, const char*);

#ifndef soap_write_cxmla__DiscoverResponse
#define soap_write_cxmla__DiscoverResponse(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "cxmla:DiscoverResponse", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_cxmla__DiscoverResponse
#define soap_read_cxmla__DiscoverResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_cxmla__DiscoverResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 cxmla__DiscoverResponse * SOAP_FMAC4 soap_get_cxmla__DiscoverResponse(struct soap*, cxmla__DiscoverResponse *, const char*, const char*);

#define soap_new_cxmla__DiscoverResponse(soap, n) soap_instantiate_cxmla__DiscoverResponse(soap, n, NULL, NULL, NULL)


#define soap_delete_cxmla__DiscoverResponse(soap, p) soap_delete(soap, p)

SOAP_FMAC1 cxmla__DiscoverResponse * SOAP_FMAC2 soap_instantiate_cxmla__DiscoverResponse(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cxmla__DiscoverResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_cxmla__return
#define SOAP_TYPE_cxmla__return (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_cxmla__return(struct soap*, const char*, int, const cxmla__return *, const char*);
SOAP_FMAC3 cxmla__return * SOAP_FMAC4 soap_in_cxmla__return(struct soap*, const char*, cxmla__return *, const char*);

#ifndef soap_write_cxmla__return
#define soap_write_cxmla__return(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "cxmla:return", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_cxmla__return
#define soap_read_cxmla__return(soap, data) ( soap_begin_recv(soap) || !soap_get_cxmla__return(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 cxmla__return * SOAP_FMAC4 soap_get_cxmla__return(struct soap*, cxmla__return *, const char*, const char*);

#define soap_new_cxmla__return(soap, n) soap_instantiate_cxmla__return(soap, n, NULL, NULL, NULL)


#define soap_delete_cxmla__return(soap, p) soap_delete(soap, p)

SOAP_FMAC1 cxmla__return * SOAP_FMAC2 soap_instantiate_cxmla__return(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_cxmla__return(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_root__
#define SOAP_TYPE_root__ (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_root__(struct soap*, const char*, int, const root__ *, const char*);
SOAP_FMAC3 root__ * SOAP_FMAC4 soap_in_root__(struct soap*, const char*, root__ *, const char*);

#ifndef soap_write_root__
#define soap_write_root__(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "root", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_root__
#define soap_read_root__(soap, data) ( soap_begin_recv(soap) || !soap_get_root__(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 root__ * SOAP_FMAC4 soap_get_root__(struct soap*, root__ *, const char*, const char*);

#define soap_new_root__(soap, n) soap_instantiate_root__(soap, n, NULL, NULL, NULL)


#define soap_delete_root__(soap, p) soap_delete(soap, p)

SOAP_FMAC1 root__ * SOAP_FMAC2 soap_instantiate_root__(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_root__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_schema
#define SOAP_TYPE_schema (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_schema(struct soap*, const char*, int, const schema *, const char*);
SOAP_FMAC3 schema * SOAP_FMAC4 soap_in_schema(struct soap*, const char*, schema *, const char*);

#ifndef soap_write_schema
#define soap_write_schema(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "schema", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_schema
#define soap_read_schema(soap, data) ( soap_begin_recv(soap) || !soap_get_schema(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 schema * SOAP_FMAC4 soap_get_schema(struct soap*, schema *, const char*, const char*);

#define soap_new_schema(soap, n) soap_instantiate_schema(soap, n, NULL, NULL, NULL)


#define soap_delete_schema(soap, p) soap_delete(soap, p)

SOAP_FMAC1 schema * SOAP_FMAC2 soap_instantiate_schema(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_schema(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_datasource_complexType
#define SOAP_TYPE_datasource_complexType (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_datasource_complexType(struct soap*, const char*, int, const datasource_complexType *, const char*);
SOAP_FMAC3 datasource_complexType * SOAP_FMAC4 soap_in_datasource_complexType(struct soap*, const char*, datasource_complexType *, const char*);

#ifndef soap_write_datasource_complexType
#define soap_write_datasource_complexType(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "datasource-complexType", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_datasource_complexType
#define soap_read_datasource_complexType(soap, data) ( soap_begin_recv(soap) || !soap_get_datasource_complexType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 datasource_complexType * SOAP_FMAC4 soap_get_datasource_complexType(struct soap*, datasource_complexType *, const char*, const char*);

#define soap_new_datasource_complexType(soap, n) soap_instantiate_datasource_complexType(soap, n, NULL, NULL, NULL)


#define soap_delete_datasource_complexType(soap, p) soap_delete(soap, p)

SOAP_FMAC1 datasource_complexType * SOAP_FMAC2 soap_instantiate_datasource_complexType(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_datasource_complexType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_sequence
#define SOAP_TYPE_sequence (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_sequence(struct soap*, const char*, int, const sequence *, const char*);
SOAP_FMAC3 sequence * SOAP_FMAC4 soap_in_sequence(struct soap*, const char*, sequence *, const char*);

#ifndef soap_write_sequence
#define soap_write_sequence(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "sequence", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_sequence
#define soap_read_sequence(soap, data) ( soap_begin_recv(soap) || !soap_get_sequence(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 sequence * SOAP_FMAC4 soap_get_sequence(struct soap*, sequence *, const char*, const char*);

#define soap_new_sequence(soap, n) soap_instantiate_sequence(soap, n, NULL, NULL, NULL)


#define soap_delete_sequence(soap, p) soap_delete(soap, p)

SOAP_FMAC1 sequence * SOAP_FMAC2 soap_instantiate_sequence(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_sequence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_simpleType
#define SOAP_TYPE_simpleType (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_simpleType(struct soap*, const char*, int, const simpleType *, const char*);
SOAP_FMAC3 simpleType * SOAP_FMAC4 soap_in_simpleType(struct soap*, const char*, simpleType *, const char*);

#ifndef soap_write_simpleType
#define soap_write_simpleType(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "simpleType", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_simpleType
#define soap_read_simpleType(soap, data) ( soap_begin_recv(soap) || !soap_get_simpleType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 simpleType * SOAP_FMAC4 soap_get_simpleType(struct soap*, simpleType *, const char*, const char*);

#define soap_new_simpleType(soap, n) soap_instantiate_simpleType(soap, n, NULL, NULL, NULL)


#define soap_delete_simpleType(soap, p) soap_delete(soap, p)

SOAP_FMAC1 simpleType * SOAP_FMAC2 soap_instantiate_simpleType(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_simpleType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_element_schema
#define SOAP_TYPE_element_schema (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_element_schema(struct soap*, const char*, int, const element_schema *, const char*);
SOAP_FMAC3 element_schema * SOAP_FMAC4 soap_in_element_schema(struct soap*, const char*, element_schema *, const char*);

#ifndef soap_write_element_schema
#define soap_write_element_schema(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "element-schema", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_element_schema
#define soap_read_element_schema(soap, data) ( soap_begin_recv(soap) || !soap_get_element_schema(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 element_schema * SOAP_FMAC4 soap_get_element_schema(struct soap*, element_schema *, const char*, const char*);

#define soap_new_element_schema(soap, n) soap_instantiate_element_schema(soap, n, NULL, NULL, NULL)


#define soap_delete_element_schema(soap, p) soap_delete(soap, p)

SOAP_FMAC1 element_schema * SOAP_FMAC2 soap_instantiate_element_schema(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_element_schema(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__rows
#define SOAP_TYPE_xmlns__rows (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__rows(struct soap*, const char*, int, const xmlns__rows *, const char*);
SOAP_FMAC3 xmlns__rows * SOAP_FMAC4 soap_in_xmlns__rows(struct soap*, const char*, xmlns__rows *, const char*);

#ifndef soap_write_xmlns__rows
#define soap_write_xmlns__rows(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:rows", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__rows
#define soap_read_xmlns__rows(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__rows(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__rows * SOAP_FMAC4 soap_get_xmlns__rows(struct soap*, xmlns__rows *, const char*, const char*);

#define soap_new_xmlns__rows(soap, n) soap_instantiate_xmlns__rows(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__rows(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__rows * SOAP_FMAC2 soap_instantiate_xmlns__rows(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__rows(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Restrictions
#define SOAP_TYPE_xmlns__Restrictions (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Restrictions(struct soap*, const char*, int, const xmlns__Restrictions *, const char*);
SOAP_FMAC3 xmlns__Restrictions * SOAP_FMAC4 soap_in_xmlns__Restrictions(struct soap*, const char*, xmlns__Restrictions *, const char*);

#ifndef soap_write_xmlns__Restrictions
#define soap_write_xmlns__Restrictions(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:Restrictions", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__Restrictions
#define soap_read_xmlns__Restrictions(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Restrictions(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Restrictions * SOAP_FMAC4 soap_get_xmlns__Restrictions(struct soap*, xmlns__Restrictions *, const char*, const char*);

#define soap_new_xmlns__Restrictions(soap, n) soap_instantiate_xmlns__Restrictions(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Restrictions(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__Restrictions * SOAP_FMAC2 soap_instantiate_xmlns__Restrictions(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Restrictions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__RestrictionList
#define SOAP_TYPE_xmlns__RestrictionList (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__RestrictionList(struct soap*, const char*, int, const xmlns__RestrictionList *, const char*);
SOAP_FMAC3 xmlns__RestrictionList * SOAP_FMAC4 soap_in_xmlns__RestrictionList(struct soap*, const char*, xmlns__RestrictionList *, const char*);

#ifndef soap_write_xmlns__RestrictionList
#define soap_write_xmlns__RestrictionList(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:RestrictionList", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__RestrictionList
#define soap_read_xmlns__RestrictionList(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__RestrictionList(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__RestrictionList * SOAP_FMAC4 soap_get_xmlns__RestrictionList(struct soap*, xmlns__RestrictionList *, const char*, const char*);

#define soap_new_xmlns__RestrictionList(soap, n) soap_instantiate_xmlns__RestrictionList(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__RestrictionList(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__RestrictionList * SOAP_FMAC2 soap_instantiate_xmlns__RestrictionList(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__RestrictionList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Properties
#define SOAP_TYPE_xmlns__Properties (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Properties(struct soap*, const char*, int, const xmlns__Properties *, const char*);
SOAP_FMAC3 xmlns__Properties * SOAP_FMAC4 soap_in_xmlns__Properties(struct soap*, const char*, xmlns__Properties *, const char*);

#ifndef soap_write_xmlns__Properties
#define soap_write_xmlns__Properties(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:Properties", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__Properties
#define soap_read_xmlns__Properties(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Properties(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Properties * SOAP_FMAC4 soap_get_xmlns__Properties(struct soap*, xmlns__Properties *, const char*, const char*);

#define soap_new_xmlns__Properties(soap, n) soap_instantiate_xmlns__Properties(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Properties(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__Properties * SOAP_FMAC2 soap_instantiate_xmlns__Properties(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Properties(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__PropertyList
#define SOAP_TYPE_xmlns__PropertyList (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__PropertyList(struct soap*, const char*, int, const xmlns__PropertyList *, const char*);
SOAP_FMAC3 xmlns__PropertyList * SOAP_FMAC4 soap_in_xmlns__PropertyList(struct soap*, const char*, xmlns__PropertyList *, const char*);

#ifndef soap_write_xmlns__PropertyList
#define soap_write_xmlns__PropertyList(soap, data) ( soap_begin_send(soap) || ((data)->soap_serialize(soap), 0) || (data)->soap_put(soap, "xmlns:PropertyList", NULL) || soap_end_send(soap) )
#endif


#ifndef soap_read_xmlns__PropertyList
#define soap_read_xmlns__PropertyList(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__PropertyList(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__PropertyList * SOAP_FMAC4 soap_get_xmlns__PropertyList(struct soap*, xmlns__PropertyList *, const char*, const char*);

#define soap_new_xmlns__PropertyList(soap, n) soap_instantiate_xmlns__PropertyList(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__PropertyList(soap, p) soap_delete(soap, p)

SOAP_FMAC1 xmlns__PropertyList * SOAP_FMAC2 soap_instantiate_xmlns__PropertyList(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__PropertyList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#define soap_new_SOAP_ENV__Fault(soap, n) soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Fault(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#define soap_new_SOAP_ENV__Reason(soap, n) soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Reason(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#define soap_new_SOAP_ENV__Detail(soap, n) soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Detail(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#define soap_new_SOAP_ENV__Code(soap, n) soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Code(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_xmlns__Execute
#define SOAP_TYPE_xmlns__Execute (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xmlns__Execute(struct soap*, struct xmlns__Execute *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xmlns__Execute(struct soap*, const struct xmlns__Execute *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Execute(struct soap*, const char*, int, const struct xmlns__Execute *, const char*);
SOAP_FMAC3 struct xmlns__Execute * SOAP_FMAC4 soap_in_xmlns__Execute(struct soap*, const char*, struct xmlns__Execute *, const char*);

#ifndef soap_write_xmlns__Execute
#define soap_write_xmlns__Execute(soap, data) ( soap_begin_send(soap) || (soap_serialize_xmlns__Execute(soap, data), 0) || soap_put_xmlns__Execute(soap, data, "xmlns:Execute", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_xmlns__Execute(struct soap*, const struct xmlns__Execute *, const char*, const char*);

#ifndef soap_read_xmlns__Execute
#define soap_read_xmlns__Execute(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Execute(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct xmlns__Execute * SOAP_FMAC4 soap_get_xmlns__Execute(struct soap*, struct xmlns__Execute *, const char*, const char*);

#define soap_new_xmlns__Execute(soap, n) soap_instantiate_xmlns__Execute(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Execute(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct xmlns__Execute * SOAP_FMAC2 soap_instantiate_xmlns__Execute(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Execute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Discover
#define SOAP_TYPE_xmlns__Discover (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xmlns__Discover(struct soap*, struct xmlns__Discover *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xmlns__Discover(struct soap*, const struct xmlns__Discover *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Discover(struct soap*, const char*, int, const struct xmlns__Discover *, const char*);
SOAP_FMAC3 struct xmlns__Discover * SOAP_FMAC4 soap_in_xmlns__Discover(struct soap*, const char*, struct xmlns__Discover *, const char*);

#ifndef soap_write_xmlns__Discover
#define soap_write_xmlns__Discover(soap, data) ( soap_begin_send(soap) || (soap_serialize_xmlns__Discover(soap, data), 0) || soap_put_xmlns__Discover(soap, data, "xmlns:Discover", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_xmlns__Discover(struct soap*, const struct xmlns__Discover *, const char*, const char*);

#ifndef soap_read_xmlns__Discover
#define soap_read_xmlns__Discover(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Discover(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct xmlns__Discover * SOAP_FMAC4 soap_get_xmlns__Discover(struct soap*, struct xmlns__Discover *, const char*, const char*);

#define soap_new_xmlns__Discover(soap, n) soap_instantiate_xmlns__Discover(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Discover(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct xmlns__Discover * SOAP_FMAC2 soap_instantiate_xmlns__Discover(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Discover(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ESessionType
#define SOAP_TYPE_ESessionType (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ESessionType(struct soap*, struct ESessionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ESessionType(struct soap*, const struct ESessionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ESessionType(struct soap*, const char*, int, const struct ESessionType *, const char*);
SOAP_FMAC3 struct ESessionType * SOAP_FMAC4 soap_in_ESessionType(struct soap*, const char*, struct ESessionType *, const char*);

#ifndef soap_write_ESessionType
#define soap_write_ESessionType(soap, data) ( soap_begin_send(soap) || (soap_serialize_ESessionType(soap, data), 0) || soap_put_ESessionType(soap, data, "ESessionType", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_ESessionType(struct soap*, const struct ESessionType *, const char*, const char*);

#ifndef soap_read_ESessionType
#define soap_read_ESessionType(soap, data) ( soap_begin_recv(soap) || !soap_get_ESessionType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct ESessionType * SOAP_FMAC4 soap_get_ESessionType(struct soap*, struct ESessionType *, const char*, const char*);

#define soap_new_ESessionType(soap, n) soap_instantiate_ESessionType(soap, n, NULL, NULL, NULL)


#define soap_delete_ESessionType(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct ESessionType * SOAP_FMAC2 soap_instantiate_ESessionType(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ESessionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_SessionType
#define SOAP_TYPE_SessionType (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SessionType(struct soap*, struct SessionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SessionType(struct soap*, const struct SessionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SessionType(struct soap*, const char*, int, const struct SessionType *, const char*);
SOAP_FMAC3 struct SessionType * SOAP_FMAC4 soap_in_SessionType(struct soap*, const char*, struct SessionType *, const char*);

#ifndef soap_write_SessionType
#define soap_write_SessionType(soap, data) ( soap_begin_send(soap) || (soap_serialize_SessionType(soap, data), 0) || soap_put_SessionType(soap, data, "SessionType", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SessionType(struct soap*, const struct SessionType *, const char*, const char*);

#ifndef soap_read_SessionType
#define soap_read_SessionType(soap, data) ( soap_begin_recv(soap) || !soap_get_SessionType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SessionType * SOAP_FMAC4 soap_get_SessionType(struct soap*, struct SessionType *, const char*, const char*);

#define soap_new_SessionType(soap, n) soap_instantiate_SessionType(soap, n, NULL, NULL, NULL)


#define soap_delete_SessionType(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SessionType * SOAP_FMAC2 soap_instantiate_SessionType(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SessionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_BSessionType
#define SOAP_TYPE_BSessionType (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_BSessionType(struct soap*, struct BSessionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_BSessionType(struct soap*, const struct BSessionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_BSessionType(struct soap*, const char*, int, const struct BSessionType *, const char*);
SOAP_FMAC3 struct BSessionType * SOAP_FMAC4 soap_in_BSessionType(struct soap*, const char*, struct BSessionType *, const char*);

#ifndef soap_write_BSessionType
#define soap_write_BSessionType(soap, data) ( soap_begin_send(soap) || (soap_serialize_BSessionType(soap, data), 0) || soap_put_BSessionType(soap, data, "BSessionType", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_BSessionType(struct soap*, const struct BSessionType *, const char*, const char*);

#ifndef soap_read_BSessionType
#define soap_read_BSessionType(soap, data) ( soap_begin_recv(soap) || !soap_get_BSessionType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct BSessionType * SOAP_FMAC4 soap_get_BSessionType(struct soap*, struct BSessionType *, const char*, const char*);

#define soap_new_BSessionType(soap, n) soap_instantiate_BSessionType(soap, n, NULL, NULL, NULL)


#define soap_delete_BSessionType(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct BSessionType * SOAP_FMAC2 soap_instantiate_BSessionType(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_BSessionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#define soap_new_SOAP_ENV__Header(soap, n) soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL)


#define soap_delete_SOAP_ENV__Header(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE__Value
#define SOAP_TYPE__Value (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__Value(struct soap*, struct _Value *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__Value(struct soap*, const struct _Value *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Value(struct soap*, const char*, int, const struct _Value *, const char*);
SOAP_FMAC3 struct _Value * SOAP_FMAC4 soap_in__Value(struct soap*, const char*, struct _Value *, const char*);

#ifndef soap_write__Value
#define soap_write__Value(soap, data) ( soap_begin_send(soap) || (soap_serialize__Value(soap, data), 0) || soap_put__Value(soap, data, "Value", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put__Value(struct soap*, const struct _Value *, const char*, const char*);

#ifndef soap_read__Value
#define soap_read__Value(soap, data) ( soap_begin_recv(soap) || !soap_get__Value(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct _Value * SOAP_FMAC4 soap_get__Value(struct soap*, struct _Value *, const char*, const char*);

#define soap_new__Value(soap, n) soap_instantiate__Value(soap, n, NULL, NULL, NULL)


#define soap_delete__Value(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct _Value * SOAP_FMAC2 soap_instantiate__Value(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Value(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Axis
#define SOAP_TYPE_xmlns__Axis (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xmlns__Axis(struct soap*, struct xmlns__Axis *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xmlns__Axis(struct soap*, const struct xmlns__Axis *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Axis(struct soap*, const char*, int, const struct xmlns__Axis *, const char*);
SOAP_FMAC3 struct xmlns__Axis * SOAP_FMAC4 soap_in_xmlns__Axis(struct soap*, const char*, struct xmlns__Axis *, const char*);

#ifndef soap_write_xmlns__Axis
#define soap_write_xmlns__Axis(soap, data) ( soap_begin_send(soap) || (soap_serialize_xmlns__Axis(soap, data), 0) || soap_put_xmlns__Axis(soap, data, "xmlns:Axis", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_xmlns__Axis(struct soap*, const struct xmlns__Axis *, const char*, const char*);

#ifndef soap_read_xmlns__Axis
#define soap_read_xmlns__Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Axis(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct xmlns__Axis * SOAP_FMAC4 soap_get_xmlns__Axis(struct soap*, struct xmlns__Axis *, const char*, const char*);

#define soap_new_xmlns__Axis(soap, n) soap_instantiate_xmlns__Axis(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Axis(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct xmlns__Axis * SOAP_FMAC2 soap_instantiate_xmlns__Axis(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__Tuple
#define SOAP_TYPE_xmlns__Tuple (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xmlns__Tuple(struct soap*, struct xmlns__Tuple *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xmlns__Tuple(struct soap*, const struct xmlns__Tuple *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__Tuple(struct soap*, const char*, int, const struct xmlns__Tuple *, const char*);
SOAP_FMAC3 struct xmlns__Tuple * SOAP_FMAC4 soap_in_xmlns__Tuple(struct soap*, const char*, struct xmlns__Tuple *, const char*);

#ifndef soap_write_xmlns__Tuple
#define soap_write_xmlns__Tuple(soap, data) ( soap_begin_send(soap) || (soap_serialize_xmlns__Tuple(soap, data), 0) || soap_put_xmlns__Tuple(soap, data, "xmlns:Tuple", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_xmlns__Tuple(struct soap*, const struct xmlns__Tuple *, const char*, const char*);

#ifndef soap_read_xmlns__Tuple
#define soap_read_xmlns__Tuple(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__Tuple(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct xmlns__Tuple * SOAP_FMAC4 soap_get_xmlns__Tuple(struct soap*, struct xmlns__Tuple *, const char*, const char*);

#define soap_new_xmlns__Tuple(soap, n) soap_instantiate_xmlns__Tuple(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__Tuple(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct xmlns__Tuple * SOAP_FMAC2 soap_instantiate_xmlns__Tuple(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__Tuple(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xmlns__ValueCellInfo
#define SOAP_TYPE_xmlns__ValueCellInfo (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xmlns__ValueCellInfo(struct soap*, struct xmlns__ValueCellInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xmlns__ValueCellInfo(struct soap*, const struct xmlns__ValueCellInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xmlns__ValueCellInfo(struct soap*, const char*, int, const struct xmlns__ValueCellInfo *, const char*);
SOAP_FMAC3 struct xmlns__ValueCellInfo * SOAP_FMAC4 soap_in_xmlns__ValueCellInfo(struct soap*, const char*, struct xmlns__ValueCellInfo *, const char*);

#ifndef soap_write_xmlns__ValueCellInfo
#define soap_write_xmlns__ValueCellInfo(soap, data) ( soap_begin_send(soap) || (soap_serialize_xmlns__ValueCellInfo(soap, data), 0) || soap_put_xmlns__ValueCellInfo(soap, data, "xmlns:ValueCellInfo", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_xmlns__ValueCellInfo(struct soap*, const struct xmlns__ValueCellInfo *, const char*, const char*);

#ifndef soap_read_xmlns__ValueCellInfo
#define soap_read_xmlns__ValueCellInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_xmlns__ValueCellInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct xmlns__ValueCellInfo * SOAP_FMAC4 soap_get_xmlns__ValueCellInfo(struct soap*, struct xmlns__ValueCellInfo *, const char*, const char*);

#define soap_new_xmlns__ValueCellInfo(soap, n) soap_instantiate_xmlns__ValueCellInfo(soap, n, NULL, NULL, NULL)


#define soap_delete_xmlns__ValueCellInfo(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct xmlns__ValueCellInfo * SOAP_FMAC2 soap_instantiate_xmlns__ValueCellInfo(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xmlns__ValueCellInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_UserDataProp
#define SOAP_TYPE_UserDataProp (36)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_UserDataProp(struct soap*, struct UserPropStruct *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_UserDataProp(struct soap*, const struct UserPropStruct *);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_UserDataProp2s(struct soap*, struct UserPropStruct);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_UserDataProp(struct soap*, const char*, int, const struct UserPropStruct *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2UserDataProp(struct soap*, const char*, struct UserPropStruct *);
SOAP_FMAC1 struct UserPropStruct * SOAP_FMAC2 soap_in_UserDataProp(struct soap*, const char*, struct UserPropStruct *, const char*);

#ifndef soap_write_UserDataProp
#define soap_write_UserDataProp(soap, data) ( soap_begin_send(soap) || (soap_serialize_UserDataProp(soap, data), 0) || soap_put_UserDataProp(soap, data, "UserDataProp", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_UserDataProp(struct soap*, const struct UserPropStruct *, const char*, const char*);

#ifndef soap_read_UserDataProp
#define soap_read_UserDataProp(soap, data) ( soap_begin_recv(soap) || !soap_get_UserDataProp(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct UserPropStruct * SOAP_FMAC4 soap_get_UserDataProp(struct soap*, struct UserPropStruct *, const char*, const char*);

#define soap_new_UserDataProp(soap, n) soap_instantiate_UserDataProp(soap, n, NULL, NULL, NULL)


#define soap_delete_UserDataProp(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct UserPropStruct * SOAP_FMAC2 soap_instantiate_UserDataProp(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_UserDataProp(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_element
#define SOAP_TYPE_element (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_element(struct soap*, struct element *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_element(struct soap*, const struct element *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_element(struct soap*, const char*, int, const struct element *, const char*);
SOAP_FMAC3 struct element * SOAP_FMAC4 soap_in_element(struct soap*, const char*, struct element *, const char*);

#ifndef soap_write_element
#define soap_write_element(soap, data) ( soap_begin_send(soap) || (soap_serialize_element(soap, data), 0) || soap_put_element(soap, data, "element", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_element(struct soap*, const struct element *, const char*, const char*);

#ifndef soap_read_element
#define soap_read_element(soap, data) ( soap_begin_recv(soap) || !soap_get_element(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct element * SOAP_FMAC4 soap_get_element(struct soap*, struct element *, const char*, const char*);

#define soap_new_element(soap, n) soap_instantiate_element(soap, n, NULL, NULL, NULL)


#define soap_delete_element(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct element * SOAP_FMAC2 soap_instantiate_element(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_element(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_pattern
#define SOAP_TYPE_pattern (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_pattern(struct soap*, struct pattern *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_pattern(struct soap*, const struct pattern *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_pattern(struct soap*, const char*, int, const struct pattern *, const char*);
SOAP_FMAC3 struct pattern * SOAP_FMAC4 soap_in_pattern(struct soap*, const char*, struct pattern *, const char*);

#ifndef soap_write_pattern
#define soap_write_pattern(soap, data) ( soap_begin_send(soap) || (soap_serialize_pattern(soap, data), 0) || soap_put_pattern(soap, data, "pattern", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_pattern(struct soap*, const struct pattern *, const char*, const char*);

#ifndef soap_read_pattern
#define soap_read_pattern(soap, data) ( soap_begin_recv(soap) || !soap_get_pattern(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct pattern * SOAP_FMAC4 soap_get_pattern(struct soap*, struct pattern *, const char*, const char*);

#define soap_new_pattern(soap, n) soap_instantiate_pattern(soap, n, NULL, NULL, NULL)


#define soap_delete_pattern(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct pattern * SOAP_FMAC2 soap_instantiate_pattern(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_pattern(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_restriction
#define SOAP_TYPE_restriction (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_restriction(struct soap*, struct restriction *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_restriction(struct soap*, const struct restriction *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_restriction(struct soap*, const char*, int, const struct restriction *, const char*);
SOAP_FMAC3 struct restriction * SOAP_FMAC4 soap_in_restriction(struct soap*, const char*, struct restriction *, const char*);

#ifndef soap_write_restriction
#define soap_write_restriction(soap, data) ( soap_begin_send(soap) || (soap_serialize_restriction(soap, data), 0) || soap_put_restriction(soap, data, "restriction", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_restriction(struct soap*, const struct restriction *, const char*, const char*);

#ifndef soap_read_restriction
#define soap_read_restriction(soap, data) ( soap_begin_recv(soap) || !soap_get_restriction(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct restriction * SOAP_FMAC4 soap_get_restriction(struct soap*, struct restriction *, const char*, const char*);

#define soap_new_restriction(soap, n) soap_instantiate_restriction(soap, n, NULL, NULL, NULL)


#define soap_delete_restriction(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct restriction * SOAP_FMAC2 soap_instantiate_restriction(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_restriction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_element__
#define SOAP_TYPE_element__ (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_element__(struct soap*, struct element__ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_element__(struct soap*, const struct element__ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_element__(struct soap*, const char*, int, const struct element__ *, const char*);
SOAP_FMAC3 struct element__ * SOAP_FMAC4 soap_in_element__(struct soap*, const char*, struct element__ *, const char*);

#ifndef soap_write_element__
#define soap_write_element__(soap, data) ( soap_begin_send(soap) || (soap_serialize_element__(soap, data), 0) || soap_put_element__(soap, data, "element", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_element__(struct soap*, const struct element__ *, const char*, const char*);

#ifndef soap_read_element__
#define soap_read_element__(soap, data) ( soap_begin_recv(soap) || !soap_get_element__(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct element__ * SOAP_FMAC4 soap_get_element__(struct soap*, struct element__ *, const char*, const char*);

#define soap_new_element__(soap, n) soap_instantiate_element__(soap, n, NULL, NULL, NULL)


#define soap_delete_element__(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct element__ * SOAP_FMAC2 soap_instantiate_element__(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_element__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_sequence_schema
#define SOAP_TYPE_sequence_schema (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_sequence_schema(struct soap*, struct sequence_schema *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_sequence_schema(struct soap*, const struct sequence_schema *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_sequence_schema(struct soap*, const char*, int, const struct sequence_schema *, const char*);
SOAP_FMAC3 struct sequence_schema * SOAP_FMAC4 soap_in_sequence_schema(struct soap*, const char*, struct sequence_schema *, const char*);

#ifndef soap_write_sequence_schema
#define soap_write_sequence_schema(soap, data) ( soap_begin_send(soap) || (soap_serialize_sequence_schema(soap, data), 0) || soap_put_sequence_schema(soap, data, "sequence-schema", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_sequence_schema(struct soap*, const struct sequence_schema *, const char*, const char*);

#ifndef soap_read_sequence_schema
#define soap_read_sequence_schema(soap, data) ( soap_begin_recv(soap) || !soap_get_sequence_schema(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct sequence_schema * SOAP_FMAC4 soap_get_sequence_schema(struct soap*, struct sequence_schema *, const char*, const char*);

#define soap_new_sequence_schema(soap, n) soap_instantiate_sequence_schema(soap, n, NULL, NULL, NULL)


#define soap_delete_sequence_schema(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct sequence_schema * SOAP_FMAC2 soap_instantiate_sequence_schema(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_sequence_schema(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_complexType_schema
#define SOAP_TYPE_complexType_schema (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_complexType_schema(struct soap*, struct complexType_schema *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_complexType_schema(struct soap*, const struct complexType_schema *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_complexType_schema(struct soap*, const char*, int, const struct complexType_schema *, const char*);
SOAP_FMAC3 struct complexType_schema * SOAP_FMAC4 soap_in_complexType_schema(struct soap*, const char*, struct complexType_schema *, const char*);

#ifndef soap_write_complexType_schema
#define soap_write_complexType_schema(soap, data) ( soap_begin_send(soap) || (soap_serialize_complexType_schema(soap, data), 0) || soap_put_complexType_schema(soap, data, "complexType-schema", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_complexType_schema(struct soap*, const struct complexType_schema *, const char*, const char*);

#ifndef soap_read_complexType_schema
#define soap_read_complexType_schema(soap, data) ( soap_begin_recv(soap) || !soap_get_complexType_schema(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct complexType_schema * SOAP_FMAC4 soap_get_complexType_schema(struct soap*, struct complexType_schema *, const char*, const char*);

#define soap_new_complexType_schema(soap, n) soap_instantiate_complexType_schema(soap, n, NULL, NULL, NULL)


#define soap_delete_complexType_schema(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct complexType_schema * SOAP_FMAC2 soap_instantiate_complexType_schema(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_complexType_schema(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_row
#define SOAP_TYPE_row (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_row(struct soap*, struct row *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_row(struct soap*, const struct row *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_row(struct soap*, const char*, int, const struct row *, const char*);
SOAP_FMAC3 struct row * SOAP_FMAC4 soap_in_row(struct soap*, const char*, struct row *, const char*);

#ifndef soap_write_row
#define soap_write_row(soap, data) ( soap_begin_send(soap) || (soap_serialize_row(soap, data), 0) || soap_put_row(soap, data, "row", NULL) || soap_end_send(soap) )
#endif


SOAP_FMAC3 int SOAP_FMAC4 soap_put_row(struct soap*, const struct row *, const char*, const char*);

#ifndef soap_read_row
#define soap_read_row(soap, data) ( soap_begin_recv(soap) || !soap_get_row(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct row * SOAP_FMAC4 soap_get_row(struct soap*, struct row *, const char*, const char*);

#define soap_new_row(soap, n) soap_instantiate_row(soap, n, NULL, NULL, NULL)


#define soap_delete_row(soap, p) soap_delete(soap, p)

SOAP_FMAC1 struct row * SOAP_FMAC2 soap_instantiate_row(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_row(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#endif

#ifndef SOAP_TYPE_PointerToESessionType
#define SOAP_TYPE_PointerToESessionType (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToESessionType(struct soap*, struct ESessionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToESessionType(struct soap*, const char *, int, struct ESessionType *const*, const char *);
SOAP_FMAC3 struct ESessionType ** SOAP_FMAC4 soap_in_PointerToESessionType(struct soap*, const char*, struct ESessionType **, const char*);

#ifndef soap_write_PointerToESessionType
#define soap_write_PointerToESessionType(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToESessionType(soap, data), 0) || soap_put_PointerToESessionType(soap, data, "ESessionType", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToESessionType(struct soap*, struct ESessionType *const*, const char*, const char*);

#ifndef soap_read_PointerToESessionType
#define soap_read_PointerToESessionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToESessionType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct ESessionType ** SOAP_FMAC4 soap_get_PointerToESessionType(struct soap*, struct ESessionType **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToSessionType
#define SOAP_TYPE_PointerToSessionType (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSessionType(struct soap*, struct SessionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSessionType(struct soap*, const char *, int, struct SessionType *const*, const char *);
SOAP_FMAC3 struct SessionType ** SOAP_FMAC4 soap_in_PointerToSessionType(struct soap*, const char*, struct SessionType **, const char*);

#ifndef soap_write_PointerToSessionType
#define soap_write_PointerToSessionType(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToSessionType(soap, data), 0) || soap_put_PointerToSessionType(soap, data, "SessionType", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSessionType(struct soap*, struct SessionType *const*, const char*, const char*);

#ifndef soap_read_PointerToSessionType
#define soap_read_PointerToSessionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSessionType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct SessionType ** SOAP_FMAC4 soap_get_PointerToSessionType(struct soap*, struct SessionType **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToBSessionType
#define SOAP_TYPE_PointerToBSessionType (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBSessionType(struct soap*, struct BSessionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBSessionType(struct soap*, const char *, int, struct BSessionType *const*, const char *);
SOAP_FMAC3 struct BSessionType ** SOAP_FMAC4 soap_in_PointerToBSessionType(struct soap*, const char*, struct BSessionType **, const char*);

#ifndef soap_write_PointerToBSessionType
#define soap_write_PointerToBSessionType(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToBSessionType(soap, data), 0) || soap_put_PointerToBSessionType(soap, data, "BSessionType", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBSessionType(struct soap*, struct BSessionType *const*, const char*, const char*);

#ifndef soap_read_PointerToBSessionType
#define soap_read_PointerToBSessionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToBSessionType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct BSessionType ** SOAP_FMAC4 soap_get_PointerToBSessionType(struct soap*, struct BSessionType **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__CellData
#define SOAP_TYPE_PointerToxmlns__CellData (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__CellData(struct soap*, xmlns__CellData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__CellData(struct soap*, const char *, int, xmlns__CellData *const*, const char *);
SOAP_FMAC3 xmlns__CellData ** SOAP_FMAC4 soap_in_PointerToxmlns__CellData(struct soap*, const char*, xmlns__CellData **, const char*);

#ifndef soap_write_PointerToxmlns__CellData
#define soap_write_PointerToxmlns__CellData(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__CellData(soap, data), 0) || soap_put_PointerToxmlns__CellData(soap, data, "xmlns:CellData", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__CellData(struct soap*, xmlns__CellData *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__CellData
#define soap_read_PointerToxmlns__CellData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__CellData(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__CellData ** SOAP_FMAC4 soap_get_PointerToxmlns__CellData(struct soap*, xmlns__CellData **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__Axes
#define SOAP_TYPE_PointerToxmlns__Axes (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__Axes(struct soap*, xmlns__Axes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__Axes(struct soap*, const char *, int, xmlns__Axes *const*, const char *);
SOAP_FMAC3 xmlns__Axes ** SOAP_FMAC4 soap_in_PointerToxmlns__Axes(struct soap*, const char*, xmlns__Axes **, const char*);

#ifndef soap_write_PointerToxmlns__Axes
#define soap_write_PointerToxmlns__Axes(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__Axes(soap, data), 0) || soap_put_PointerToxmlns__Axes(soap, data, "xmlns:Axes", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__Axes(struct soap*, xmlns__Axes *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__Axes
#define soap_read_PointerToxmlns__Axes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__Axes(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Axes ** SOAP_FMAC4 soap_get_PointerToxmlns__Axes(struct soap*, xmlns__Axes **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__OlapInfo
#define SOAP_TYPE_PointerToxmlns__OlapInfo (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__OlapInfo(struct soap*, xmlns__OlapInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__OlapInfo(struct soap*, const char *, int, xmlns__OlapInfo *const*, const char *);
SOAP_FMAC3 xmlns__OlapInfo ** SOAP_FMAC4 soap_in_PointerToxmlns__OlapInfo(struct soap*, const char*, xmlns__OlapInfo **, const char*);

#ifndef soap_write_PointerToxmlns__OlapInfo
#define soap_write_PointerToxmlns__OlapInfo(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__OlapInfo(soap, data), 0) || soap_put_PointerToxmlns__OlapInfo(soap, data, "xmlns:OlapInfo", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__OlapInfo(struct soap*, xmlns__OlapInfo *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__OlapInfo
#define soap_read_PointerToxmlns__OlapInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__OlapInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__OlapInfo ** SOAP_FMAC4 soap_get_PointerToxmlns__OlapInfo(struct soap*, xmlns__OlapInfo **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__Cell
#define SOAP_TYPE_PointerToxmlns__Cell (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__Cell(struct soap*, xmlns__Cell *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__Cell(struct soap*, const char *, int, xmlns__Cell *const*, const char *);
SOAP_FMAC3 xmlns__Cell ** SOAP_FMAC4 soap_in_PointerToxmlns__Cell(struct soap*, const char*, xmlns__Cell **, const char*);

#ifndef soap_write_PointerToxmlns__Cell
#define soap_write_PointerToxmlns__Cell(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__Cell(soap, data), 0) || soap_put_PointerToxmlns__Cell(soap, data, "xmlns:Cell", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__Cell(struct soap*, xmlns__Cell *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__Cell
#define soap_read_PointerToxmlns__Cell(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__Cell(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Cell ** SOAP_FMAC4 soap_get_PointerToxmlns__Cell(struct soap*, xmlns__Cell **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__Axis
#define SOAP_TYPE_PointerToxmlns__Axis (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__Axis(struct soap*, struct xmlns__Axis *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__Axis(struct soap*, const char *, int, struct xmlns__Axis *const*, const char *);
SOAP_FMAC3 struct xmlns__Axis ** SOAP_FMAC4 soap_in_PointerToxmlns__Axis(struct soap*, const char*, struct xmlns__Axis **, const char*);

#ifndef soap_write_PointerToxmlns__Axis
#define soap_write_PointerToxmlns__Axis(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__Axis(soap, data), 0) || soap_put_PointerToxmlns__Axis(soap, data, "xmlns:Axis", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__Axis(struct soap*, struct xmlns__Axis *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__Axis
#define soap_read_PointerToxmlns__Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__Axis(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct xmlns__Axis ** SOAP_FMAC4 soap_get_PointerToxmlns__Axis(struct soap*, struct xmlns__Axis **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__Tuple
#define SOAP_TYPE_PointerToxmlns__Tuple (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__Tuple(struct soap*, struct xmlns__Tuple *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__Tuple(struct soap*, const char *, int, struct xmlns__Tuple *const*, const char *);
SOAP_FMAC3 struct xmlns__Tuple ** SOAP_FMAC4 soap_in_PointerToxmlns__Tuple(struct soap*, const char*, struct xmlns__Tuple **, const char*);

#ifndef soap_write_PointerToxmlns__Tuple
#define soap_write_PointerToxmlns__Tuple(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__Tuple(soap, data), 0) || soap_put_PointerToxmlns__Tuple(soap, data, "xmlns:Tuple", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__Tuple(struct soap*, struct xmlns__Tuple *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__Tuple
#define soap_read_PointerToxmlns__Tuple(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__Tuple(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct xmlns__Tuple ** SOAP_FMAC4 soap_get_PointerToxmlns__Tuple(struct soap*, struct xmlns__Tuple **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__Member
#define SOAP_TYPE_PointerToxmlns__Member (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__Member(struct soap*, xmlns__Member *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__Member(struct soap*, const char *, int, xmlns__Member *const*, const char *);
SOAP_FMAC3 xmlns__Member ** SOAP_FMAC4 soap_in_PointerToxmlns__Member(struct soap*, const char*, xmlns__Member **, const char*);

#ifndef soap_write_PointerToxmlns__Member
#define soap_write_PointerToxmlns__Member(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__Member(soap, data), 0) || soap_put_PointerToxmlns__Member(soap, data, "xmlns:Member", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__Member(struct soap*, xmlns__Member *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__Member
#define soap_read_PointerToxmlns__Member(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__Member(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__Member ** SOAP_FMAC4 soap_get_PointerToxmlns__Member(struct soap*, xmlns__Member **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__AxisInfo
#define SOAP_TYPE_PointerToxmlns__AxisInfo (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__AxisInfo(struct soap*, xmlns__AxisInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__AxisInfo(struct soap*, const char *, int, xmlns__AxisInfo *const*, const char *);
SOAP_FMAC3 xmlns__AxisInfo ** SOAP_FMAC4 soap_in_PointerToxmlns__AxisInfo(struct soap*, const char*, xmlns__AxisInfo **, const char*);

#ifndef soap_write_PointerToxmlns__AxisInfo
#define soap_write_PointerToxmlns__AxisInfo(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__AxisInfo(soap, data), 0) || soap_put_PointerToxmlns__AxisInfo(soap, data, "xmlns:AxisInfo", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__AxisInfo(struct soap*, xmlns__AxisInfo *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__AxisInfo
#define soap_read_PointerToxmlns__AxisInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__AxisInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__AxisInfo ** SOAP_FMAC4 soap_get_PointerToxmlns__AxisInfo(struct soap*, xmlns__AxisInfo **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__HierarchyInfo
#define SOAP_TYPE_PointerToxmlns__HierarchyInfo (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__HierarchyInfo(struct soap*, xmlns__HierarchyInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__HierarchyInfo(struct soap*, const char *, int, xmlns__HierarchyInfo *const*, const char *);
SOAP_FMAC3 xmlns__HierarchyInfo ** SOAP_FMAC4 soap_in_PointerToxmlns__HierarchyInfo(struct soap*, const char*, xmlns__HierarchyInfo **, const char*);

#ifndef soap_write_PointerToxmlns__HierarchyInfo
#define soap_write_PointerToxmlns__HierarchyInfo(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__HierarchyInfo(soap, data), 0) || soap_put_PointerToxmlns__HierarchyInfo(soap, data, "xmlns:HierarchyInfo", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__HierarchyInfo(struct soap*, xmlns__HierarchyInfo *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__HierarchyInfo
#define soap_read_PointerToxmlns__HierarchyInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__HierarchyInfo(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__HierarchyInfo ** SOAP_FMAC4 soap_get_PointerToxmlns__HierarchyInfo(struct soap*, xmlns__HierarchyInfo **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__MemberType
#define SOAP_TYPE_PointerToxmlns__MemberType (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__MemberType(struct soap*, xmlns__MemberType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__MemberType(struct soap*, const char *, int, xmlns__MemberType *const*, const char *);
SOAP_FMAC3 xmlns__MemberType ** SOAP_FMAC4 soap_in_PointerToxmlns__MemberType(struct soap*, const char*, xmlns__MemberType **, const char*);

#ifndef soap_write_PointerToxmlns__MemberType
#define soap_write_PointerToxmlns__MemberType(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__MemberType(soap, data), 0) || soap_put_PointerToxmlns__MemberType(soap, data, "xmlns:MemberType", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__MemberType(struct soap*, xmlns__MemberType *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__MemberType
#define soap_read_PointerToxmlns__MemberType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__MemberType(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__MemberType ** SOAP_FMAC4 soap_get_PointerToxmlns__MemberType(struct soap*, xmlns__MemberType **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__MemberName
#define SOAP_TYPE_PointerToxmlns__MemberName (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__MemberName(struct soap*, xmlns__MemberName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__MemberName(struct soap*, const char *, int, xmlns__MemberName *const*, const char *);
SOAP_FMAC3 xmlns__MemberName ** SOAP_FMAC4 soap_in_PointerToxmlns__MemberName(struct soap*, const char*, xmlns__MemberName **, const char*);

#ifndef soap_write_PointerToxmlns__MemberName
#define soap_write_PointerToxmlns__MemberName(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__MemberName(soap, data), 0) || soap_put_PointerToxmlns__MemberName(soap, data, "xmlns:MemberName", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__MemberName(struct soap*, xmlns__MemberName *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__MemberName
#define soap_read_PointerToxmlns__MemberName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__MemberName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__MemberName ** SOAP_FMAC4 soap_get_PointerToxmlns__MemberName(struct soap*, xmlns__MemberName **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToxmlns__ParentUniqueName
#define SOAP_TYPE_PointerToxmlns__ParentUniqueName (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxmlns__ParentUniqueName(struct soap*, xmlns__ParentUniqueName *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxmlns__ParentUniqueName(struct soap*, const char *, int, xmlns__ParentUniqueName *const*, const char *);
SOAP_FMAC3 xmlns__ParentUniqueName ** SOAP_FMAC4 soap_in_PointerToxmlns__ParentUniqueName(struct soap*, const char*, xmlns__ParentUniqueName **, const char*);

#ifndef soap_write_PointerToxmlns__ParentUniqueName
#define soap_write_PointerToxmlns__ParentUniqueName(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToxmlns__ParentUniqueName(soap, data), 0) || soap_put_PointerToxmlns__ParentUniqueName(soap, data, "xmlns:ParentUniqueName", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxmlns__ParentUniqueName(struct soap*, xmlns__ParentUniqueName *const*, const char*, const char*);

#ifndef soap_read_PointerToxmlns__ParentUniqueName
#define soap_read_PointerToxmlns__ParentUniqueName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxmlns__ParentUniqueName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 xmlns__ParentUniqueName ** SOAP_FMAC4 soap_get_PointerToxmlns__ParentUniqueName(struct soap*, xmlns__ParentUniqueName **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToUserDataProp
#define SOAP_TYPE_PointerToUserDataProp (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToUserDataProp(struct soap*, struct UserPropStruct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToUserDataProp(struct soap*, const char *, int, struct UserPropStruct *const*, const char *);
SOAP_FMAC3 struct UserPropStruct ** SOAP_FMAC4 soap_in_PointerToUserDataProp(struct soap*, const char*, struct UserPropStruct **, const char*);

#ifndef soap_write_PointerToUserDataProp
#define soap_write_PointerToUserDataProp(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToUserDataProp(soap, data), 0) || soap_put_PointerToUserDataProp(soap, data, "UserDataProp", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToUserDataProp(struct soap*, struct UserPropStruct *const*, const char*, const char*);

#ifndef soap_read_PointerToUserDataProp
#define soap_read_PointerToUserDataProp(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToUserDataProp(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct UserPropStruct ** SOAP_FMAC4 soap_get_PointerToUserDataProp(struct soap*, struct UserPropStruct **, const char*, const char*);

#ifndef SOAP_TYPE_PointerToelement
#define SOAP_TYPE_PointerToelement (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToelement(struct soap*, struct element *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToelement(struct soap*, const char *, int, struct element *const*, const char *);
SOAP_FMAC3 struct element ** SOAP_FMAC4 soap_in_PointerToelement(struct soap*, const char*, struct element **, const char*);

#ifndef soap_write_PointerToelement
#define soap_write_PointerToelement(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerToelement(soap, data), 0) || soap_put_PointerToelement(soap, data, "element", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToelement(struct soap*, struct element *const*, const char*, const char*);

#ifndef soap_read_PointerToelement
#define soap_read_PointerToelement(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToelement(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct element ** SOAP_FMAC4 soap_get_PointerToelement(struct soap*, struct element **, const char*, const char*);

#ifndef SOAP_TYPE_PointerTorow
#define SOAP_TYPE_PointerTorow (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTorow(struct soap*, struct row *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTorow(struct soap*, const char *, int, struct row *const*, const char *);
SOAP_FMAC3 struct row ** SOAP_FMAC4 soap_in_PointerTorow(struct soap*, const char*, struct row **, const char*);

#ifndef soap_write_PointerTorow
#define soap_write_PointerTorow(soap, data) ( soap_begin_send(soap) || (soap_serialize_PointerTorow(soap, data), 0) || soap_put_PointerTorow(soap, data, "row", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTorow(struct soap*, struct row *const*, const char*, const char*);

#ifndef soap_read_PointerTorow
#define soap_read_PointerTorow(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTorow(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 struct row ** SOAP_FMAC4 soap_get_PointerTorow(struct soap*, struct row **, const char*, const char*);

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (7)
#endif

#define soap_default_xsd__string(soap, a) soap_default_string(soap, a)


#define soap_serialize_xsd__string(soap, a) soap_serialize_string(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, char **, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_begin_send(soap) || (soap_serialize_xsd__string(soap, data), 0) || soap_put_xsd__string(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap*, char **, const char*, const char*);

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)


#define soap_serialize__QName(soap, a) soap_serialize_string(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#endif

/* End of soapH.h */
