Changes 9-March-2015
1. Support for Mondrian level properties. Caveat: will not work when having two propeties with the same name on the same hierarchy
2. Support for proxy bypass.
3. Preregisters well known CA root certificates.
4. Works with SharePoint 2013.

Changes 1-Jan-2015

1. Proxy autoconfiguration script support. Implemented with ATLHTTP. You need to download it from here: http://atlserver.codeplex.com/ . The solution expects atlhttp to be on the same level with gsoap. The current build layout is shown belw:

\
|
----XMLA Code
|
----openssl
|	--lib
|		--i386
|			--static
|		--x86_64
|			--static
----gsoap
|
----atl_server

2. Propagate format strings to Excel.
3. Handles local trust for SSL.
4. Small bugs.

Changes 8-September-2014

1. openssl

	Conditional disable of SSL host check. This is achieved by using the registry key: SOAP_SSL_SKIP_HOST_CHECK (DWORD) in HKEY_CURRENT_USER\Software\Arquery\ODBO
		1. Write any non-zero value to skip host checking
		2. Write 0 (or don’t declare the key) to enable host checking.

	The installer v 1.0.0.2 defaults to SKIP host checking.

Changes 5-September-2014

1. openssl added

It  expects openssl to be a folder on the same level with the provider as shown below:

\
|
----XMLA Code
|
----openssl
	--lib
		--i386
			--static
		--x86_64
			--static

2. Support for custom properties in dimension and cell properties

3. IDBInfo support


Changes 15-Apr-2014

The Visual Studio 2010 solution has been cleaned-up with respect to gSOAP files. It now expects gsoap to be on a folder on the same level with the provider as shown below:

\
|
----XMLA Code
|
----gsoap

All the paths in the solution are now relative to the above layout. This was introduced in order to help compilation. Everything one has to do is to download the provider, download gsoap, respect the configuration above and build. Don't forget to build first the debug version so gsoap can generate files. 


How to build

In theory you can build this with Windows SDK. In practice this was never tried yet. In the repo there is a Visual Studio 2010 solution that works.
You need gSOAP (https://sourceforge.net/projects/gsoap2/) in order to build this project. Once you installed gSOAP you need to adjust the solution for the gSOAP path. With the project open in Visual Sudio 2010, in the Solution Explorer go to gsoap->def and right-click on XMLAMethods.h. You must change the Custom Build Tool so that it matches your actual location of soapcpp2.exe. 
Please note: You must build at least once a debug version. Only debug versions generate the gSOAP files required by the build process.


How to register

The provider is a COM dll. You register it using regsvr32. If you build using Visual Studio it will auto-register. On systems with UAC you need to run as administrator (Visual Studio/regsvr32) in order to register.


How to use

Use Excel. Create a pivot table from an external data source. Enjoy.


How to get help

We are building a wiki for the project (https://sourceforge.net/p/xmlaconnect/wiki/Home/). Stay tuned.

How to get a setup

The current setup is on the project page (https://sourceforge.net/projects/xmlaconnect/files/)